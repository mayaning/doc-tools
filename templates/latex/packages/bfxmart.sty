\ProvidesPackage{bfxmart}


% ***** ****** ****** ****** ******
% 加载多行注释宏包
% ***** ****** ****** ****** ******
\usepackage{verbatim}
% 使用方法
\begin{comment}
  这里是多行注释，这里不会显示到文档里面
  注释行1
  注释行2
  注释行3
\end{comment}


% ***** ****** ****** ****** ******
% Latex自定义宏包与类文件的默认搜索路径设置方法
% ***** ****** ****** ****** ******
\begin{comment}
    对于自定义的LaTeX宏包与类，在调用时可以通过在命令\documentclass{}与
    \usepackage{}命令中指定完整路径或者相对路径，这样确实可以调用，
    但是编译时总是有烦人的警告信息，让人不爽。还好有一个办法可以解决。

    Linux环境下，LaTex默认宏包与类的搜索路径是由环境变量TEXMFHOME控制的，
    可以通过如下命令查看这个环境变量的默认配置：
        kpsewhich -var-value=TEXMFHOME
    结果一般为$\$$HOME/texmf, 这个目录一般不存在，可以创建它，或者修改环境变量
    TEXMFHOME的值。我们采取后一种：
    修改\$HOME/.bashrc文件，加入如下内容:
        TEXMFHOME=\$HOME/Documents/texmf
        export TEXMFHOME
    执行source \$HOME/.bashrc使配置生效。
    创建目录：
        mkdir -p \$TEXMFHOME/tex/latex/commonstuff
    将自定义的宏包与类放出上面的目录即可。
\end{comment}


% ***** ****** ****** ****** ******
% Latex多文件工程
% ***** ****** ****** ****** ******
\usepackage{import}
\begin{comment}
    在一个tex文件中，可以使用\input{filepath/filename}或
    \inlude{filepath/filename}来包含其它的tex文件。

    另外一种方法是使用import包来包含其它tex文件，该包提供两个命令：
    1. \import{filepath}{filename}或\inputfrom{filepath}{filename}
    2. \subimport{filepath}{filename}或\subinputfrom{filepath}{filename}
    \import命令中的filepath可以是绝对路径，也可以是当前工作目录的相关路径。
    \subimport命令中的filepath是相对于\import命令中filepath的相对路径， 如下：
    \import{abc/}{one}   % 包含当前工作目录/abc/one.tex文件
    \subimport{def}{two} % 包含当前工作目录/abc/def/two.tex文件

    这两种方式有个限制条件，即被包含的tex文件不能用tex文件头(如
    \begin{document}...\end{document}等)。

\end{comment}


% ***** ****** ****** ****** ******
% 加载中文宏包
% ***** ****** ****** ****** ******
\usepackage{ctex}
\begin{comment}
  Latex有三种方式支持中文：
  1. CJKutf8
    CJK有两个基本宏包：CJK和CJKutf8，其中后者面向utf-8编码，
    其一般使用方法如下：
    \usepackage{CJKutf8}
    \begin{document}
    \begin{CJK}{UTF8}{}
    …
    \end{CJK}
    \end{document}
    方式1使用pdflatex编译tex文件。
  2.CTEX的UTF8选项
    上面的 CJKutf8 只提供了两种字体，可选择的余地太小，
    我们可以直接用 UTF8 选项使CTEX 支持 utf-8 编码，
    利用 CTEX 丰富的字体和中文设置可以更好地编辑 Latex 中文文本，
    其语法格式为：
    \documentclass[UTF8]{article}
    \usepackage{ctex}
    或者，直接使用ctexart
    \documentclass[UTF8]{ctexart}
    方式2使用pdflatex编译
  3. xelatex编译
    XeTeX 是一种使用 Unicode 的 TeX 排版引擎，它原生的支持 Unicode ，
    并默认其输入文件为 utf-8 编码。XeTeX 可以在不进行额外配置的情况下
    直接使用操作系统中安装的字体。XeLaTeX 是使用 LaTeX 的排版引擎，
    也有上述 XeTeX 的优点，命令下直接使用 xelatex ***.tex 
    就会产生对应的 PDF 文件。以下是一个简单的xelatex 编译 ctex 的例子
    （同样把 tex 文件保存成 utf-8 格式）
    % xelatex_test.tex
    \documentclass{article}
    \usepackage{ctex}
    \begin{document}
    这是一个CTEX的utf-8编码例子，{\kaishu 这里是楷体显示}，
    {\songti 这里是宋体显示}，{\heiti 这里是黑体显示}，{\fangsong 这里是仿宋显示}。
    \end{document}
    明眼的同学一下就发现了，这货跟上面第2条中 ctex 的代码相比，就少了一个 UTF8
    选项啊！额，表面看是这样的，但是如果如果直接把 xelatex_test.tex 用 pdflatex
    编译，系统就会报错。这是因为不加 UTF8 选项，pdflatex 默然按照 GBK 编码处理
    tex 文件，而这个文件我们是用 utf-8 编码的，这样就会造成解码失败。这里直接用
    xelatex 编译，就会编译成功，因为 xelatex 的默认输入文件是 utf-8 编码。

    版权声明：本文为CSDN博主「_zZhe」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转
    载请附上原文出处链接及本声明。
    原文链接：https:
    //blog.csdn.net/z_feng12489/article/details/90449495
\end{comment}


% ***** ****** ****** ****** ******
% 设置中文字体
% ***** ****** ****** ****** ******
% 使用xelatex好像会使用系统字体，这里暂不设置
\begin{comment}
  方法1：
    \CJKfontspec{Noto Serif CJK SC}
    \setCJKfamilyfont{Note SC}{Noto Serif CJK SC}
    \CJKfamily{Note SC}                %配合\setCJKfamilyfont
  方法2:
    \setCJKmainfont[BoldFont=FandolSong-Bold.otf,ItalicFont=FandolKai-Regular.otf]{FandolSong-Regular.otf}
    \setCJKsansfont[BoldFont=FandolHei-Bold.otf]{FandolHei-Regular.otf}
    \setCJKmonofont{FandolFang-Regular.otf}
    % fandol字体的链接如下：
    % https://www.ctan.org/tex-archive/fonts/fandol/
\end{comment}


% ***** ****** ****** ****** ******
% 颜色设置
% ***** ****** ****** ****** ******
\usepackage[x11names]{xcolor}
\begin{comment}
  xcolor宏包中预定义的颜色有: 
      * 19种基本颜色、
      * 68种dvips颜色、
      * 151种SVG颜色、
      * 317种Unix/X11颜色，
  如果要使用后三类颜色，引用宏包时需加相应预定义颜色集合选项:
  \usepackage[svgnames]{xcolor}
  \usepackage[x11names]{xcolor}
  \usepackage[dvipsnames]{xcolor}

  % 黑底白字
  \colorbox{Black}{\color{White}White}
  % 红框绿背景
  \fcolorbox{Red}{Green}{红框绿背景} 
\end{comment}


% ***** ****** ****** ****** ******
% 链接宏包
% ***** ****** ****** ****** ******
\usepackage[xetex,      % 生成链接的后端驱动，详情见CTAN hyperref手册
    hidelinks,          % 隐藏链接的颜色和边框
    CJKbookmarks=true   %支持中文书签
    ]{hyperref}
\begin{comment}
    在所有引用处插入链接，可以跳转到被引用位置，如从目录跳转至相应章节，从图片引
    用位置跳转到图片等。
    hidelinks参数用于去掉hyperref默认在链接上加入的红框
    使用方法：
    % The text is made a hyperlink to the URL; this must be a full URL (relative
    % to the base URL, if that is defined). The special characters # and ˜ do
    % not need to be escaped in any way (unless the command is used in the
    % argument of another command). 
    \href[options]{URL}{text}
    % Similar to \href{URL}{\nolinkurl{URL}}. Depending on the driver \href also
    % tries to detect the link type. Thus the result can be a url link, file
    % link, …
    \url{URL}
    % Write URL in the same way as \url, without creating a hyperlink.
    \nolinkurl{URL}
    % A base URL is established, which is prepended to other specified URLs, to
    % make it easier to write portable documents.
    \hyperbaseurl{URL}
    % The link to the image referenced by the URL is inserted, using text as
    % the anchor. 
    \hyperimage{imageURL}{text}
    % A target area of the document (the text) is marked, and given the name
    % category.name
    \hyperdef{category}{name}{text} 
    % text is made into a link to URL#category.name
    \hyperref{URL}{category}{name}{text} 
    % text is made into a link to the same place as \ref{label} would be linked.
    \hyperref[label]{text}
    % A simple internal link is created with \hypertarget, with two parameters
    % of an anchor name, and anchor text. \hyperlink has two arguments, the name
    % of a hypertext object defined somewhere by \hypertarget, and the text
    % which be used as the link on the page.
    % Note that in HTML parlance, the \hyperlink command inserts a notional # in
    % front of each link, making it relative to the current testdocument; \href
    % expects a full URL
    \hyperlink{name}{text}
    \hypertarget{name}{text}
\end{comment}


% ***** ****** ****** ****** ******
% 表格制作
% ***** ****** ****** ****** ******
\usepackage{tabularx}
\usepackage{colortbl}
\usepackage{booktabs}
\usepackage{multirow}
\usepackage{diagbox}
\usepackage{threeparttable}
\usepackage{longtable}
\usepackage{tabu}
\begin{comment}

    使用方法：
    \begin{table*}[!htbp]
      \centering
      \begin{tabularx}{\textwidth}{lXXX} %X指定单元格可自动换行
        \toprule
        item1 &item2 &item3 &item4  &item5 \\
        \midrule
        item1 &item2 &item3 &item4  &item5 \\
        \bottomrule
      \end{tabularx}
      \caption{Tabularx example}
      \label{tab:tabularx}
    \end{table*}

    上述方法制作的表格不能跨页，如果需要跨页的表格使用如下方法：
    % X指定单元格内可自动换行; [5,l]和[15,l]中数字指定每个单元个占表格宽度的比例，
    % 字母(l,c,r)指定单元格内对齐方式; to \textwidth指定表格宽度
    \begin{longtabu} to \textwidth {X[25,l]X[75,l]} 
      \toprule
      item1 &item2 &item3 &item4  &item5 \\
      \midrule
      item1 &item2 &item3 &item4  &item5 \\
      \bottomrule \\  %注意这个地方有\\
      % 跨页表格中的caption与普通的caption不同，它也是表格中的一行
      \caption{标准数字格式说明符}
      \label{tab:contextKeywords}
    \end{longtabu}
\end{comment}

% ***** ****** ****** ****** ******
% 文本框 - tcolorbox
% ***** ****** ****** ****** ******
\usepackage{tcolorbox}
\tcbuselibrary{most}
\begin{comment}
  
  一、基础环境和基础命令
  tcolorbox宏包提供了与宏包同名的环境，是整个宏包的基础环境，用于生成段落间的文
  本框。与之对应，宏包还提供了\tcbox命令，用于生成行内的文本框。使用方式如下：

  % ----- ----- ----- ----- ----- ------ ----- ----- ------ ----- -----
  % tcolorbox环境使用方法:
  \begin{tcolorbox}[options]
    environment content
  \end{tcolorbox}
  % 行内文本框使用方法:
  \tcbox[options]{box content}
  % ----- ----- ----- ----- ----- ------ ----- ----- ------ ----- -----

  示例1：
  \begin{tcolorbox}
    This is my first \textbf{tcolorbox}.
  \end{tcolorbox}

  示例2：
  \begin{tcolorbox}
    This is another \textbf{tcolorbox}.
    \tcblower
    Here, you see the lower part of the box.
  \end{tcolorbox}

  示例3：
  \begin{tcolorbox}[title = {I Love Sophia}]
    This is a \textbf{tcolorbox} with title.
    \tcblower
    Here, you see the lower part of the box.
  \end{tcolorbox}

  \tcbset{colframe = blue!50!black, colback = white,
        colupper = red!50!black, fonttitle = \bfseries,
        nobeforeafter, center title}

  Text \tcbox[tcbox raise base]{Hello World}\hfill
  %
  \tcbox[left = 0mm, right = 0mm, top = 0mm, bottom = 0mm, boxsep = 0mm,
      toptitle = 0.5mm, bottomtitle = 0.5mm, title = {My table}]
      {\arrayrulecolor{blue!50!black}
  \renewcommand{\arraystretch}{1.2}%
  \begin{tabular}{r|c|l}
    One & Two & Three \\
    \hline\hline
    Men   & Mice   & Lions \\\hline
    Upper & Middle & Lower
  \end{tabular}}\hfill
  %
  \tcbox[colback=blue!85!black,
        left = 0mm, right = 0mm, top = 0mm, bottom = 0mm,
        boxsep = 1mm, arc = 0mm, boxrule = 0.5pt, title = {My picture}]
  {\includegraphics[width = 5cm]{example-image}}

  tcolorbox环境和\tcbox命令都可以接收一组选项，用来控制文本框的样式。常用的选项
  如下：

  TODO: 常用选项说明
  
  二、定义和重定义新的box
  tcolorbox宏包提供了4个命令，分别用来定义和重定义tcolorbox和\tcbox命令制作的文
  本框样式:
  % ----- ----- ----- ----- ----- ------ ----- ----- ------ ----- -----
  \newtcolorbox[init options]{name}[number][default]{options}
  \renewtcolorbox[init options]{name}[number][default]{options}
  \newtcbox[init options]{\name}[number][default]{options}
  \renewtcbox[init options]{\name}[default]{options}
  % ----- ----- ----- ----- ----- ------ ----- ----- ------ ----- -----
  * [init options] 通常是用来控制计数器的，具体可以参见tcolorbox宏包说明手册的第
    5章
  * {name} 是新定义的环境或命令的名字
  * [number] 是环境或命令参数的个数
  * [default] 是环境或命令可选参数的默认值
  * {options} 接受类似\tcbset的key-value参数列表

  示例1：
  \newtcolorbox{mybox}{colframe = red!75!black}
  \begin{mybox}
    This is my own box.
  \end{mybox}

  示例2：
  \renewtcolorbox{mybox}{colback = red!25!white, colframe = red!75!black}
  \begin{mybox}
    This is my own box.
  \end{mybox}

  示例3：
  \begin{tcolorbox}[colback = red!25!white, colframe = red!75!black]
    This is my own box.
  \end{tcolorbox}

  说明：示例1中用\newtcolorbox定义了名为mybox的环境; 示例2中用\renewtcolorbox重
  新定义了名为mybox的环境; 示例3用原始tcolorbox重复实现mybox环境的效果.

  示例4: 
  \newtcolorbox{mybox}[2][]{colback = red!5!white, colframe = red!75!black, 
    fonttitle = \bfseries, colbacktitle = red!85!black, enhanced, 
    attach boxed title to top center={yshift=-2mm},
    titile=#2,#1}
  \begin{mybox}[colback=yellow]{Hello there}
    This is my own box with a mandatory title and options
  \end{mybox}
  
  说明：示例4中用\newtcolorbox命令定义了一个稍微复杂的mybox环境。它接收两个参数，
  其中第一个参数是可选的，默认值为空；第二个参数则是必填的参数。第一个参数用作
  tcolorbox环境参数补充，第二个参数则是box的标题。

  示例5：
  \newtcbox{\mybox}[1][red]{on line, arc = 0pt, outer arc = 0pt, 
    colback = #1!10!white, colframe = #1!50!black, 
    boxsep = 0pt, left = 1pt, right = 1pt, top = 2pt, bottom = 2pt,
    boxrule = 0pt, bottomrule = 1pt, toprule = 1pt}

    The \mybox[green]{quick} brown \mybox{fox} \mybox[blue]{jumps} over the 
    \mybox[green]{lazy} \mybox{dog}.

  说明：\newtcbox命令定义了一个新的\mybox命令，它可以用来高亮选中的单词.

  三、Warp既有环境
  有时候，我们希望将既有的Latex环境改造成带文本框样式的环境。这时候，可以使用
  \tcolorboxenvironment环境，它的用法是:
  % ----- ----- ----- ----- ----- ------ ----- ----- ------ ----- -----
  \tcolorboxenvironment{name}{options}
  % ----- ----- ----- ----- ----- ------ ----- ----- ------ ----- -----
  
  示例3.1
  \newenvironment{myitemize}{\begin{itemize}}{\end{itemize}}
  \tcolorboxenvironment{myitemize}{blanker, before skip = 6pt, after skip = 6pt, 
    borderline west = {3mm}{0pt}{red}}
  Some text.
  \begin{myitemize}
    \item Alpha
    \item Beta
    \item Beta
    \item Gamma
  \end{myitemize}
  More text.

  说明：示例3.1中, 用\tcolorboxenvironment命令，在myitemize环境外重新Wrap了一层。
  新的myitemize环境在左侧有一道宽为3mm的红色提示线。不难发现，
  \tcolorboxenvironment命令可以在(几乎)不改变原有环境效果的情况下，定义一个新的
  文本框环境。这种功能十分实用。

  四. 常用选项
  这里列一些常用的选项，用来控制tcolorbox环境和\tcbox命令的效果。其它未尽选项和
  效果，可以查看tcolorbox的使用说明手册.

  4.1 标题的内容控制
  * title=<text>: 设置标题内容，默认为空.
  * notitle: 移除标题
  * adjusted title=<text>: 设置标题内容，默认为空。使用title生成的标题，标题栏会
  根据标题内容的高低自动调整;而使用adjusted tile生成的标题，标题栏的高度由当前行
  的多个文本框中的标题高度最高的文本框决定，即把一行中的多个文本框的标题调成一样
  的高度。
  * squeezed title=<text>: 设置标题内容，默认为空。使用squeezed title生成的标题，
  如果超过允许长度，不会换行，而是会在横向进行压缩。
  * squeezed title*=<text>: 设置标题，默认为空。合并了adjusted title和squeezed
  title的效果。
  
  示例4.1
  \documentclass{article}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}

  \begin{document}
    \tcbset{colback=white, arc=0mm, width=(\linewidth-4pt)/4, 
    equal height group=AT, before=, after=\hfill, fonttitle=\bfseries}
    
    \noindent
    \foreach \n in {xxx,ggg,AAA,\"Agypten}
    { 
      \begin{tcolorbox}[title=\n,colframe=red!75!black]
        Some content.
      \end{tcolorbox} 
    }

    \noindent
    \foreach \n in {xxx,ggg,AAA,\"Agypten}
    {
      \begin{tcolorbox}[adjusted title=\n, colframe=blue!75!black]
        Some content.
      \end{tcolorbox}
    }

    \begin{tcbitemize}[raster columns=3, raster equal height, 
        colframe=red!75!black,colback=red!5!white,fonttitle=\bfseries]
      \tcbitem[squeezed title={Short title}] First box
      \tcbitem[squeezed title={This is a very very long title}] Second box
      \tcbitem[squeezed title={This title is clearly to long for this
        application}] Third box
    \end{tcbitemize}

    \begin{tcbitemize}[raster columns=3, raster equal height, 
        colframe=blue!75!black, colback=red!5!white, fonttitle=\bfseries]
      \tcbitem[squeezed title*={Short title}] First box
      \tcbitem[squeezed title*={This is a very very long title}] Second box
      \tcbitem[squeezed title*={This title is clearly to long for this
        applictaion}] Third box
    \end{tcbitemize}
  \end{document}

  4.2 标题的位置
  默认情况下，文本框的标题会附在文本框的上方。这一状态称为attach.我们可以将标题
  从默认位置上移开，这个动作称为detach. detach之后，我们就可以用tcolorbox提供的
  宏将标题放在任意自己想要放的位置。其中，\tcbtitletex存储了标题的文本内容，
  \tcbtitle则储存了标题的文本及样式。
  * attach title: 默认样式，标题将显示在文本框上方的单独单元格里。
  * detach title: 取消文本框上方单独的单元格，标题需要用户手工指定位置。
  * attach title to upper = ⟨text⟩: 取消文本框上方单独的单元格，标题放在文本框
    upper 部分的头部。
  
  示例4.2
  \documentclass{article}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}
  \begin{document}
    \newtcolorbox{mybox}[2][]{colbacktitle=red!10!white, colback=blue!10!white,
      coltitle=red!70!black, title={#2},fonttitle=\bfseries,#1}
    % Box 1
    \begin{mybox}{My title}
      This is a \textbf{tcolorbox}.
    \end{mybox}
    % Box 2
    \begin{mybox}[detach title,before upper={\tcbtitle\quad}]{My title}
      This is a \textbf{tcolorbox}.
    \end{mybox}
    % Box 3
    \begin{mybox}[detach title,after upper={\par\hfill\tcbtitle}]{My title}
      This is a \textbf{tcolorbox}.
    \end{mybox}
    % Box 4
    \begin{mybox}[attach title to upper={\ ---\ }]{My title}
      This is a \textbf{tcolorbox}.
    \end{mybox}
    % Box 5
    \begin{mybox}[attach title to upper,after title={:\ }]{My title}
      This is a \textbf{tcolorbox}.
    \end{mybox}
  \end{document}
  
  说明：Box 1是正常的形式，Box 2-5是detach的情形，before upper将\tcbtitle放在
  upper部分之前; after upper将\tcbtitle换行后放在upper部分的末尾；Box 4,5使用两
  种方式设置了标题的分隔符。

  4.3 upper和lower的状态
  tcolorbox 宏包输出的文本框，在逻辑上可以分为 upper 和 lower 两个部分，在代码中
  用 \tcblower 命令分割 upper 和 lower 两部分——如果没有 \tcblower，则当前文本框
  只有 upper 部分，而没有 lower 部分。 upper 和 lower 部分都有可见 (visible) 和
  不可见 (invisible) 两种状态，lower 部分还有被忽略 (ignored) 这一额外的状态。
  * upperbox = ⟨visible|invisible⟩: 控制 upper 部分是否可见
  * lowerbox = ⟨visible|invisible|ignored⟩: 控制 lower 部分是否可见
  * visible: 同时控制 upper 和 lower 部分可见
  * invisible: 同时控制 upper 和 lower 部分不可见

  示例4.3:
  \documentclass{article}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}
  \begin{document}
    % Box 1
    \begin{tcolorbox}[upperbox=invisible,colback=white]
      This is a \textbf{tcolorbox} (but invisible).
    \end{tcolorbox}
    % Box 2
    \begin{tcolorbox}[upperbox=invisible,colback=white]
      This is a \textbf{tcolorbox} (but invisible).
      \tcblower
      This is the lower part.
    \end{tcolorbox}
    % Box 3
    \begin{tcolorbox}[lowerbox=invisible,colback=white]
      This is a \textbf{tcolorbox}.
      \tcblower
      This is the lower part (but invisible).
    \end{tcolorbox}
    % Box 4
    \begin{tcolorbox}[lowerbox=ignored,colback=white]
      This is a \textbf{tcolorbox}.
      \tcblower
      This is the lower part (but ignored).
    \end{tcolorbox}
  \end{document}

  4.4 upper 和 lower 部分的分隔
  默认情况下，upper 和 lower 部分之间会有一个分隔，不过，我们也可以通过 lower
  separated 来控制是否显示这一分隔符。
  * lower separated = ⟨true|false⟩: 控制是否显示 upper 和 lower 两部分中间的分隔。

  示例4.4
  \documentclass{article}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}
  \begin{document}
    \begin{tcbraster}[colback=red!5!white,colframe=red!75!black,
      fonttitle=\bfseries,fontlower=\itshape] %
      % Box 1
      \begin{tcolorbox}[title=Lower separated]
        This is the upper part.
        \tcblower
        This is the lower part.
      \end{tcolorbox}
      % Box 2
      \begin{tcolorbox}[title=Lower not separated,lower separated=false]
        This is the upper part.
        \tcblower
        This is the lower part.
      \end{tcolorbox}
      % Box 3 左右分栏
      \begin{tcolorbox}[sidebyside,title=Lower separated]
        This is the upper part.
        \tcblower
        This is the lower part.
      \end{tcolorbox}
      % Box 4
      \begin{tcolorbox}[sidebyside,title=Lower not separated,
        lower separated=false]
        This is the upper part.
        \tcblower
        This is the lower part.
      \end{tcolorbox}
      % Box 5 beamer ?
      \begin{tcolorbox}[beamer,title=Lower separated]
        This is the upper part.
        \tcblower
        This is the lower part.
      \end{tcolorbox}
      % Box 6 beamer
      \begin{tcolorbox}[beamer,title=Lower not separated,lower separated=false]
        This is the upper part.
        \tcblower
        This is the lower part.
      \end{tcolorbox}
    \end{tcbraster}
  \end{document}

  说明: 这里用 tcbraster 环境做了一个明显的左右对比。我们可以看到，当开启 lower
  separated=false 时，各个 skin 下的分隔都不见了。值得注意的是，中间一行中，我们
  使用了 sidebyside 选项，它能将 upper 和 lower 两个部分从上下的布局样式，改变成
  左右的布局样式。

  4.5 颜色和字体控制
  tcolorbox 提供了很多颜色控制选项，用来控制文本框各个部分的颜色效果。
  * colframe: 文本框框沿的颜色，默认是 black!75!white。
  * colback: 文本框内的底色，默认是 black!5!white。
  * colbacktitle: 文本框中标题框的底色，默认是 black!50!white。
  * colupper: upper 部分文字的颜色。
  * collower: lower 部分文字的颜色。
  * coltext: 同时设置 upper 和 lower 部分文字的颜色。
  * coltitle: title 部分文字的颜色。

  示例4.5
  \documentclass{article}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}
  \begin{document}
  \begin{tcolorbox}[title = {My Box},
    colframe = red!50!white, colback = green!50!white,
    colbacktitle = green!30!white,
    colupper = yellow!25!red, collower = yellow!75!red,
    coltitle = black!90!white]
    This is a \textbf{tcolorbox}.
    \tcblower
    This is the lower part.
  \end{tcolorbox}
  \end{document}

  * fontupper: 控制 upper 部分的字体
  * fontlower: 控制 lower 部分的字体
  * fonttitle: 控制 title 部分的字体

  示例4.6
  \documentclass{article}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}
  \begin{document}
  \begin{tcolorbox}[title = {My Box},
    fonttitle = \bfseries, fontupper = \sffamily, fontlower = \itshape]
    This is a \textbf{tcolorbox}.
    \tcblower
    This is the lower part.
  \end{tcolorbox}
  \end{document}

  4.6 宽度控制
  tcolorbox 宏包提供了三个选项对宽度进行最基本的控制，它们分别是：
  * width: 文本框的总宽度，默认是 \linewidth。
  * textwidth: 文本框内文本的宽度。
  * add to width: 在现有设置的基础上，调整文本框的总宽度。

  示例4.7
  \documentclass{article}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}
  \begin{document}
    \tcbset{width=5cm, colback=red!5!white, colframe=red!75!black}
    \begin{tcolorbox}
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
    \begin{tcolorbox}[text width = 5cm]
      \rule{5cm}{2ex}
    \end{tcolorbox}
    \begin{tcolorbox}[add to width = -1cm]
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
  \end{document}

  4.7 线条
  tcolorbox 输出的文本框，其框线都可以设置宽度。
  * toprule/bottomrule/leftrule/rightrule: 分别设置文本框上、下、左、右的框线宽度。
  * titlerule: 设置标题框和内容框之间的框线宽度。
  * boxrule: 同时设置上述 5 条框线的宽度。

  示例4.8
  \documentclass{article}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}
  \begin{document}
    \tcbset{boxrule = 0.5mm, colback=red!5!white, colframe=red!75!black,
      title = {My title}}
    \begin{tcolorbox}
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
    \begin{tcolorbox}[toprule = 3mm]
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
    \begin{tcolorbox}[bottomrule = 3mm]
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
    \begin{tcolorbox}[leftrule = 3mm]
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
    \begin{tcolorbox}[rightrule = 3mm]
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
    \begin{tcolorbox}[titlerule = 3mm]
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
  \end{document}

  4.8 弧度
  文本框的弧度也是可以定制的。并且，文本框的弧度，在 tcolorbox 中被细分为内弧和
  外弧，可以分别设置。默认情况下，外弧的弧度与内弧保持一致（auto outer arc）。
  * arc=⟨length⟩: 设置内弧的半径。
  * outer arc=⟨length⟩: 设置外弧的半径，可以与内弧不同。
  * auto outer arc: 让外弧的半径自动随着内弧的半径增减，默认启用。
  
  示例4.9
  \documentclass{article}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}
  \begin{document}
    \tcbset{colback = red!5!white, colframe = red!75!black}
    \begin{tcolorbox}[arc = 0mm]
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
    \begin{tcolorbox}[arc = 3mm]
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
    \begin{tcolorbox}[arc = 4mm, outer arc = 1mm]
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
    \begin{tcolorbox}[arc = 1mm, outer arc = 4mm]
      This is a \textbf{tcolorbox}.
    \end{tcolorbox}
  \end{document}

  五、theorems 程序包
  tcolorbox 宏包提供了 theorems 程序包来实现定理类的环境。theorems 程序包会自动
  加载 amsmath 宏包。加载调用的方法如前所述：
  % ----- ----- ----- ----- ----- ------ ----- ----- ------ ----- -----
  \tcbuselibrary{theorems}
  % ----- ----- ----- ----- ----- ------ ----- ----- ------ ----- -----
  theorems 程序包提供了两个命令，来生成文本框样式的定理类环境。
  % ----- ----- ----- ----- ----- ------ ----- ----- ------ ----- -----
  \newtcbtheorem[⟨init options⟩]{⟨name⟩}{⟨display name⟩}{⟨options⟩}{⟨prefix⟩}
  \renewtcbtheorem[⟨init options⟩]{⟨name⟩}{⟨display name⟩}{⟨options⟩}{⟨prefix⟩}
  % ----- ----- ----- ----- ----- ------ ----- ----- ------ ----- -----
  两个命令分别都有 4 个必需参数和 1 个可选参数。
  * name: 创建的 LaTeX 环境名称
  * display name: 创建的环境的标题名称
  * options: 传入 tcolorbox 的参数
  * prefix: 用于生成环境的 label
  * init options: 用于控制编号
  我们来看几个例子。
  \documentclass[UTF8]{ctexart}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}
  \begin{document}
  \section{标题}
  \newtcbtheorem[number within=section]{mytheo}{我的定理环境}%
    {colback=green!5,colframe=green!35!black,fonttitle=\bfseries}{th}
  \begin{mytheo}{定理标题}{theoexample}
    这里是定理内容。计数器按照设定，随着~\verb|\section|~的更新而更新。
    定理编号为：\ref{th:theoexample}，位于第~\pageref{th:theoexample}~页。
  \end{mytheo}
  \begin{mytheo}[label=myownlabel]{定理标题}{}
    通过可选参数，可以继续向~\verb|tcolorbox|~环境传入参数。
    \verb'label'~参数可以留空；当它不为空时，则可以作为定理环境的引用：
    \ref{myownlabel}。
  \end{mytheo}
  \begin{mytheo}{}{}
    如果定理标题留空，那么编号之后的分隔符（默认是冒号）会自动消失。
  \end{mytheo}
  \begin{mytheo*}{不编号的定理之标题}
    \verb'\newtcbtheorem'~也会同时定义带星花的版本，用于产生不编号的定理。
    不编号的定理，当然也就没有交叉引用一说了。
  \end{mytheo*}
  \begin{mytheo*}{}
    无标题的不编号的定理，当然也是可以有的。
  \end{mytheo*}
  \end{document}

  5.1选项
  theorems 程序包也提供了诸多选项，用来控制生成的定理环境样式。
  * separator sign = ⟨sign⟩: 设置定理环境编号和标题之间的分隔符，默认是 :。
  * separator sign colon: 相当于 separator sign = {:}
  * separator sign dash: 相当于 separator sign = {-}
  * separator sign none: 相当于 separator sign = {}
  * description delimiters={⟨left⟩}{⟨right⟩}: 设置定理标题左右的定界符，默认是空。
  * description delimiters parenthesis: 相当于 description delimiters = {(}{)}
  * description delimiters none: 相当于 description delimiters = {}{}
  * description color = ⟨color⟩: 设置定理标题的字体颜色。
  * description font = ⟨text⟩: 设置定理标题的字体。
  * terminator sign = ⟨sign⟩: 设置定理标题结束后的终止符。
  * terminator sign colon: 相当于 terminator sign = {:}
  * terminator sign dash: 相当于 terminator sign = {-}
  * terminator sign none: 相当于 terminator sign = {}

  示例5.1
  \documentclass[UTF8]{ctexart}
  \usepackage{tcolorbox}
  \tcbuselibrary{most}
  \usepackage{amsmath, amssymb}
  \begin{document}
  \section{标题}
  \newtcbtheorem[number within=section]{mytheo}{定理}%
    {colback=green!5,colframe=green!35!black,fonttitle=\bfseries}{th}
  \begin{mytheo}{我的定理}{}
  这是默认样式。
  \end{mytheo}
  \begin{mytheo}[separator sign = {\ $\blacktriangleright$}]{我的定理}{}
  分隔符修改为 $\blacktriangleright$。
  \end{mytheo}
  \begin{mytheo}[description delimiters parenthesis]{我的定理}{}
  定界符修改为圆括号。
  \end{mytheo}
  \begin{mytheo}[description color=red!25!yellow,
    description font= {\mdseries\itshape}]{我的定理}{}
  标题的字体及颜色修改。
  \end{mytheo}
  \begin{mytheo}[terminator sign={.}]{我的定理}{}
  标题后的终止符。
  \end{mytheo}
  \end{document}
  
  示例5.2
  \documentclass[UTF8]{ctexart}
  \usepackage{enumitem}
  \usepackage{tcolorbox}
  \tcbuselibrary{skins, breakable, theorems}

  \newtcbtheorem{question}{题~(理}%
    {enhanced, breakable,
      colback = white, colframe = cyan, colbacktitle = cyan,
      attach boxed title to top left = {yshift = -2mm, xshift = 5mm},
      boxed title style = {sharp corners},
      fonttitle = \sffamily\bfseries, separator sign = {).~}}{qst}

  \begin{document}
  \section{测试}

  \begin{question}{函数}{example}
  已知函数 $ f(x) = (x - 2)\mathrm{e}^{2} + a (x - 1)^{2} $ 有两个零点.
  \begin{enumerate}[label=(\arabic*)]
    \item 求 $ a $ 的取值范围;
    \item 设 $ x_{1} $, $ x_{2} $ 是 $ f(x) $ 的两个零点，证明 $ x_{1} + x_{2} < 2 $.
  \end{enumerate}
  \end{question}

  这里我们调用了 skins/breakable/theorems 三个程序包，其中 theorems 我们已经见过
  了。skins 程序包提供了各种「皮肤」，可以在基础 tcolorbox 的基础上扩展更多样式：
  attach boxed title to top left 这一效果就来自 skins 程序包中的 enhanced 主题。
  breakable 的效果则使得文本框能够跨页。

\end{document}

\end{comment}

% ***** ****** ****** ****** ******
% 代码块配置 - listings
% ***** ****** ****** ****** ******
\usepackage{listings}
\lstset{
  % 选择代码背景，必须加上\ usepackage {color}或\ usepackage {xcolor}.
  backgroundcolor=\color{LightBlue1},
  % 基本代码风格
  basicstyle=\footnotesize,
  % 关键字显示风格.
  keywordstyle=\color{blue},
  % 设置注释格式
  commentstyle=\color[cmyk]{1,0,1,0},    
  % string literal style
  stringstyle=\color{gray},        
  % ????
  flexiblecolumns,                 
  % 设置是否当且仅当在空白处自动中断.
  breakatwhitespace=false,
  % 设置自动断行.
  breaklines=true,
  % 设置标题位置. b指在下面，t指在上面
  captionpos=b,
  % 是否删除给定语言的关键词.
  deletekeywords={...},
  % 是否在代码中添加LaTex, 在%*和*)之间的代码为latex代码
  escapeinside={\%*}{*)},
  % 是否允许使用非ASCII字符; 仅适用于8位编码，不适用于UTF-8.
  % 设置为False 解决代码跨页时，章节标题，页眉等汉字不显示的问题
  extendedchars=false,
  % 给代码区添加边框.
  frame=single,
  % 设置代码距边框的左边距
  framexleftmargin=8mm,
  % 保留空格（useful for keeping indentation of code (possibly needs columns=flexible).
  keepspaces=true,
  % 使用的语言.
  %language=Octave,
  % 是否需要添加其他的关键词.
  morekeywords={*,...},
  % 给代码添加行号，可取值none, left, right.
  numbers=left,
  % 设置行号与代码之间的间隔
  numbersep=5mm,
  % 行号的字号和颜色
  numberstyle=\tiny\color{gray},
  % 边框颜色，如果没有设置，框架颜色可以在非黑色文本中的换行符上更改
  %（例如 text (e.g. comments (green here))）
  rulecolor=\color{black},
  % 显示每个地方添加特定下划线的空格; 覆盖了'showtringspaces'
  showspaces=false,
  % 仅在字符串中允许空格
  showstringspaces=false,
  % show tabs within strings adding particular underscores
  showtabs=false,
  % the step between two line-numbers. If it's 1, each line will be numbered
  stepnumber=1,
  % 将默认tab设置为4个空格
  tabsize=4,
  % show the filename of files included with \lstinputlisting; 
  % also try caption instead of title
  %title=\lstname,
  % 设置边距, 这个边距不是相对于实际页边的位置,
  % 而是从真正可写的位置开始算的。也就是实际距
  % 页边的距离为: 全局边距+此处设置的值
  xleftmargin=0.5cm,xrightmargin=0.5cm, aboveskip=0.2cm
}
\begin{comment}
  使用方法：
  方法1：
    \begin{lstlisting}[language=C]
      some code
    \end{lstlisting}
  方法2：
    \lstinputlisting[language=Python, caption={Listing caption}]{source_filename.py}
    还可以指定文件中代码的起止位置
    \lstinputlisting[language=Python，firstline=37，lastline=45]{source_filename.py}
  方法3：
    在行内使用，columes=fixed选项不知道有什么用, 行内\lstinline生成的内容超长会
    自动换行
    \lstinline[columns=fixed]{declare}
\end{comment}


% ***** ****** ****** ****** ******
% 代码块配置 - minted
% ***** ****** ****** ****** ******
% outpudir用于向minted传递latex系列命令的-output-dir， 如果在latex命令行指定了这
% 个参数，需要设置outputdir选项，否则minted会报找不到文件的错误
\usepackage[outputdir=outputs]{minted} 
\usepackage{ifthen}
\usepackage{fontawesome5}
%\usepackage[many]{tcolorbox}
\usepackage{array}
\usepackage{tabularx}
\usepackage{cleveref}

% minted的选项
\setminted{
  % 代码字符编码
  encoding=utf8,
  % 允许代码换行
  breaklines=true,
  % 允许在记号间换行，不允许在记号内部换行
  breakbytokenanywhere=true,
  % 换行后自动缩进
  breakautoindent=true,
  % 可以用于高亮注释或docstrings中的特殊代码标签，比如todo，bug，note等
  %codetagify={FIXME},
  % 在@和@之间的代码为latex代码
  % escapeinside=@@          
  % 字体
  fontfamily=tt,
  % 字体大小
  %fontsize=\scriptsize,
  % 边框样式, 可配置参数有：none, leftline, topline, bottomline, lines, single
  %frame=single,
  % 边框线宽
  %framerule=0.4pt,
  % 边框与代码间的距离
  %framesep=\fboxsep,
  % 行号及位置
  %numbers=left,
  % 设置背景颜色
  %bgcolor=black,
  % 在其它环境内部重设左侧边距
  %resetmargins=true
}
% 设置代码高亮风格, 可以使用 pygmentize -L styles 命令获取支持的风格
\usemintedstyle{tango} 

% 定义新的计数器，用于comments的标签索引计数
\newcounter{commentCount} 
\newcounter{cmdlineCount} 
% 定义新的计数器，用于从文件中插入代码的标签索引计数
%\newcounter{filePrg}
% 定义新的计数器，用于嵌入式代码的标签索引计数
%\newcounter{inputPrg}
% 无论是从文件中插入还是嵌入式代码，从读者的角度看都是代码，所以取消它们独立的计
% 数器，使用统一的计数器
\newcounter{codeCount}

% 定义注释/代码框的表头风格
\newcolumntype{\CeX}{>{\centering\let\newline\\\arraybackslash}X}%
\newcommand{\TwoSymbolsAndText}[3]{%
  \begin{tabularx}{\textwidth}{c\CeX c}%
    #1 & #2 & #3
  \end{tabularx}%
}

% 定义注释/代码框的表头风格
\usepackage{tabularx}
\newcolumntype{\LeX}{>{\let\newline\\\arraybackslash}X}%
\newcommand{\OneSymbolAndText}[2]{%
  \begin{tabularx}{340pt}{l\LeX}  % should normally be \textwidth instead of 
                                  % 340pt but fills out the box nicer this way
    #1 & #2
  \end{tabularx}%
}

\tcbuselibrary{listings}
\tcbuselibrary{minted}
% 定义注释框插入命令
\newtcolorbox[use counter=commentCount, number format=\arabic]{commentBox}[2]{
  size=title,
  arc=1.5mm,
  breakable,
  enhanced jigsaw,
  colframe=black,
  coltitle=white,
  boxrule=0.5mm,
  colback=white,
  coltext=black,
  title=\TwoSymbolsAndText{\faCheck}{%
    \textbf{Comment \thetcbcounter}\ifthenelse{\equal{#1}{}}{}{\textbf{:} \textit{#1}}%
  }{\faCheck},
  label=comment:#2,
}

% 定义命令行输出框
\newtcblisting[use counter=cmdlineCount, number format=\arabic]{cmdlineInput}[1]{
  listing engine=minted,
  boxrule=0.1mm,
  colback=black,
  colframe=black,
  coltext=white,
  listing only,
  left=5mm,
  enhanced,
  arc=1.5mm,
  overlay={
    \begin{tcbclipinterior}
      \fill[black] (frame.south west)
      rectangle ([xshift=5mm]frame.north west);
    \end{tcbclipinterior}
  },
  minted language=text,
  minted style=tango,
  minted options={breaklines,autogobble,linenos,numbersep=3mm,
    fontsize=\scriptsize},
  label=cmdline:#1
}

% 从文件中插入命令行输出
\newtcbinputlisting[use counter=cmdlineCount, number format=\arabic]{\cmdlineFromFile}[2]{%
  listing engine=minted,
  boxrule=0.1mm,
  colback=black,
  colframe=black,
  coltext=white,
  listing only,
  left=5mm,
  enhanced,
  arc=1.5mm,
  overlay={
    \begin{tcbclipinterior}
      \fill[black] (frame.south west)
      rectangle ([xshift=5mm]frame.north west);
    \end{tcbclipinterior}
  },
  minted language=text,
  minted style=tango,
  minted options={breaklines,autogobble,linenos,numbersep=3mm,
    fontsize=\scriptsize},
  listing file={#1},
  label=cmdline:#2
}

% 定义从文件中插入代码的命令
\newtcbinputlisting[use counter=codeCount, number format=\arabic]{\codeFromFile}[4]{%
  listing engine=minted,
  boxrule=0.1mm,
  colback=white,
  colframe=blue!45!black,
  coltext=black,
  coltitle=white,
  size=title,
  listing only,
  left=5mm,
  enhanced,
  arc=1.5mm,
  overlay={
    \begin{tcbclipinterior}
      \fill[white] (frame.south west)
      rectangle ([xshift=5mm]frame.north west);
    \end{tcbclipinterior}
  },
  title=\TwoSymbolsAndText{\faCode}{%
    \textbf{代码 \thetcbcounter}\ifthenelse{\equal{#3}{}}{}{\textbf{:} \textit{#3}}%
  }{\faCode},
  minted language=#1,
  minted style=tango,
  minted options={breaklines,autogobble,linenos,numbersep=3mm,
    fontsize=\scriptsize},
  listing file={#2},
  label=code:#4
}

% 定义嵌入式代码插入命令
\newtcblisting[use counter=codeCount, number format=\arabic]{codeInput}[3]{
  listing engine=minted,
  boxrule=0.1mm,
  colback=white,
  colframe=blue!45!black,
  coltext=black,
  coltitle=white,
  size=title,
  listing only,
  left=5mm,
  enhanced,
  arc=1.5mm,
  overlay={
    \begin{tcbclipinterior}
      \fill[white] (frame.south west)
      rectangle ([xshift=5mm]frame.north west);
    \end{tcbclipinterior}
  },
  title=\TwoSymbolsAndText{\faCode}{%
    \textbf{代码 \thetcbcounter}\ifthenelse{\equal{#3}{}}{}{\textbf{:} \textit{#3}}%
  }{\faCode},
  minted language=#1,
  minted style=tango,
  minted options={breaklines,autogobble,linenos,numbersep=3mm,
    fontsize=\scriptsize},
  label=code:#3
}

% 定义嵌入式代码插入命令2
\newtcblisting[use counter=codeCount, number format=\arabic]{codeInputSimple}[2]{
  listing engine=minted,
  minted language=#1,
  minted options={autogobble,breaklines},
  listing only,
  size=title,
  arc=0mm,
  breakable,
  enhanced jigsaw,
  boxrule=0mm,
  colback=white,
  coltext=black,
  label=code:#2
}

\newcommand{\code}[1]{ {\mintinline{text}{#1}} }

% 重定义标签引用的名称
\crefname{commentCount}{comment}{comments}
%\crefname{filePrg}{file program}{file programs}
%\crefname{inputPrg}{input program}{input programs}
\crefname{codeCount}{代码}{代码}

\begin{comment}
    1. minted介绍:
    minted可以提供比lstings更为灵活的源码高亮方式，minted支持的语言也更多。
    minted的安装使用比lstings更为复杂，它依赖于Pygments. Pygments可以通过如下命令
    安装：
    pip install Pygments
    同时minted还依赖如下tex的包，这些包一般会在tex的发布版中包含:
    *keyval     *ifthen     *xcolor
    *kvoptions  *calc       *lineno
    *fancyvrb   *ifplatform *framed
    *fvextra    *pdftexcmds *shellesc (for luatex 0.87+)
    *upquote    *etoolbox   *catchfile
    *float      *xstring
    通常minted也会包含在tex的发布版中.

    2. minted使用说明：
    因为minted是调用的外部命令(Pyments)进行语法高亮的，所以需要设置latex命令行参
    数-shell-escape以允许latex运行外部命令, 如下:
    xelatex -shell-escape something.tex

    3. 示例:
    \begin{minted}{<language>}
      <code>
    \end{minted}
    \mint{<language>}|<code>|
    \mintinline{<language>}{<code>}
    \inputminted[<options>]{<language>}{<filename>}

    \begin{commentBox}{My first comment}{first}
      My first comment here! \faTree
    \end{commentBox}

    \begin{codeInput}{c}{A welcome program.}{code01}
      #include <stdio.h>
      int main() {
        printf("Hello world!\n");
        return 0;
      }
    \end{codeInput}

    \codeFromFile{java}{HelloWorld.java}{Another welcome program.}{code01}

    See \cref{comment:first} for details. Also, look for 
    \cref{inputPrg:code01} and \cref{filePrg:code01} for further assistance.
\end{comment}


% ***** ****** ****** ****** ******
% 设置页面边距
% ***** ****** ****** ****** ******
\usepackage{geometry}
\geometry{a4paper,left=2.54cm,right=3.18cm,top=3.18cm,bottom=2.54cm}
\begin{comment}
    很多latex模板都将页面边距设置好了，自己不用怎么修改。但有时候也需要自己来
    设置页边距，查阅了相关资料，发现使用 geometry 宏包可以方便地调整页边距。
    用法如下:
        \usepackage{geometry}
        \geometry{a4paper,scale=0.8}
    上面命令设置了纸张为a4 纸，并且版心占页面长度的比例为80\%；
    scale也可以改为ratio，表示版面边距占页面长度的比例。
    该宏包还可以设置页面的上下左右边距，例如：
        \geometry{a4paper,left=2cm,right=2cm,top=1cm,bottom=1cm}
\end{comment}


% ***** ****** ****** ****** ******
% 数学公式
% ***** ****** ****** ****** ******
\usepackage{amsmath}
\usepackage{amssymb}
\begin{comment}
    gather环境分行排版并且有编号。使用\\命令换行
    \begin{gather}
        a + b = b + a   \\
        ab  ba
    \end{gather}
    gather*环境没有编号
    \begin{gather*}
        a + b = b + a   \\
        3 \times 5 = 5 \times 3
    \end{gather*}
    在gather环境中使用\notag命令组织编号
    \begin{gather}
        a ^2 + b^2 = c^2  \notag  \\
        5 ^2 +12^2 =13^2  \notag  \\
        4^2 +3^2 =5^2
    \end{gather}
    使用align和align*环境(用&进行对齐),
    对齐位置由&符号指定, 按等号对齐，按照起始位置对齐
    带编号示例
    \begin{align}
        x & = t +\cos t+1 \\
        y & = 2 \sin t
    \end{align}
    不带编号示例
    \begin{align*}
        x & = t & x &=\cos t      & x &=t \\
        y & = 2t& y &= \sin (t+1) & y &= \sin t
    \end{align*}
    实现一个公式的多行排版
    split 环境 (对其采用align环境的方式，编号在中间)
    \begin{equation}
        \begin{split}
            \cos 2x &= \cos^2 x - \sin ^2 x\\
                    &= 2\cos^2 x-1
        \end{split}
    \end{equation}
    分段函数排版使用cases环境
    每行公式中使用 & 分割为两部分通常表示值和后面的条件部分
    使用\text或\mbox命令在公式中无法实现中文排版
    \begin{equation}
        D(x) =  \begin{cases}
            1 ,& \mbox{如果} x \in \mathbb{Q}; \\
            0 ,& \text{如果} x \in  \mathbb{R}\setminus\mathbb{Q}.
        \end{cases}
    \end{equation}
\end{comment}


% ***** ****** ****** ****** ******
% 图片宏包
% ***** ****** ****** ****** ******
\usepackage{graphicx}
\usepackage{varwidth}

\newcounter{figureCount}
\crefname{figureCount}{图}{图}

\newtcbox[use counter=figureCount, number format=\arabic]{\figureBox}[2]{
  enhanced, before skip=2mm,after skip=2mm,
  colback=black!5,colframe=black!50,boxrule=0.2mm,
  attach boxed title to top left={xshift=1cm,yshift*=1mm-\tcboxedtitleheight},
  varwidth boxed title*=-3cm,
  boxed title style={frame code={
    \path[fill=tcbcolback!30!black]
      ([yshift=-1mm,xshift=-1mm]frame.north west)
      arc[start angle=0,end angle=180,radius=1mm]
      ([yshift=-1mm,xshift=1mm]frame.north east)
      arc[start angle=180,end angle=0,radius=1mm];
    \path[left color=tcbcolback!60!black,right color=tcbcolback!60!black,
      middle color=tcbcolback!80!black]
      ([xshift=-2mm]frame.north west) -- ([xshift=2mm]frame.north east)
      [rounded corners=1mm]-- ([xshift=1mm,yshift=-1mm]frame.north east)
      -- (frame.south east) -- (frame.south west)
      -- ([xshift=-1mm,yshift=-1mm]frame.north west)
      [sharp corners]-- cycle;
    },interior engine=empty,
  },
  fonttitle=\bfseries,
  title={#1},
  colbacktitle=green,
  label=fig:#2
}

% 自定义插入图片的快捷命令
\newcommand{\figureFromFile}[3]{
  \figureBox{#2}{#3}{
    \includegraphics[width = \textwidth]{#1}
  }
}

\begin{comment}
    用法：
    1. 使用\includegraphics命令进行插图
        \includegraphics[scale=0.3]{XDU.jpg}
    2. 使用浮体
        \begin{figure}[ht]
            \centering
            %\includegraphics[scale=0.3]{XDU.jpg}
            \includegraphics[width=0.95\textwidth]{XDU.jpg}
            \caption{this is my head portrait}
            \label{figl}
        \end{figure}
    3. 相对路径添加图片：
    \begin{figure}[ht]
        \centering 
        %这个是在LaTeX文件夹中的相对路径
        %\includegraphics[scale=0.6]{figs/XDU.jpg}
        \includegraphics[width=0.95\textwidth]{figs/XDU.jpg}
        \caption{Relative Path}
        \label{fig2}
    \end{figure}
    4. 绝对路径添加图片：
    \begin{figure}[ht]
        \centering
        %这个是图片的绝对路径
        %\includegraphics[scale=0.6]{C:/LatexWS/figs/路径XDU.jpg}
        \includegraphics[width=0.95\textwidth]{C:/LatexWS/figs/路径XDU.jpg}
        \caption{Absolute Path}
        \label{fig3}
    \end{figure}
    5. 指定路径后添加图片：
    graphicx宏包有一个特别有用的命令，graphicspat{}{}，
    它可以指定我们图片的路径。
    %表示在当前目录下存放有一个图片，下次插入图片从此路径开始
    \graphicspath{{figs/}}
    \begin{figure}[ht]
        \centering
        %从刚才指定的路径中调用XDU.jpg图片
        %\includegraphics[scale=0.6]{XDU.jpg}
        \includegraphics[width=0.95\textwidth]{XDU.jpg}
        \caption{Selected Path}
        \label{fig4}
    \end{figure}
    6. 跨双栏插入图片：
    有时在写论文时，论文的的版面是左右双栏，在figure后面加*号这样就可以把单栏
    的图片双栏显示。
    \begin{figure*}[ht]
        \centering
        %\includegraphics[scale=0.6]{XDU.jpg}
        \includegraphics[width=0.95\textwidth]{XDU.jpg}
        \caption{Double Column}
        \label{fig5}
    \end{figure*}
\end{comment}


% ***** ****** ****** ****** ******
% 限制浮动位置
% ***** ****** ****** ****** ******
\usepackage[section]{placeins}
\begin{comment}
    为了避免浮动对象（图形和表格等）被排版到下一节中，可以采用 placeins宏包。
    使用\usepackage{placeins}命令调用该宏包，然后在浮动对象不能跨越的地方
    （如“\section”之前）插入命令 “\FloatBarrier” ，这样LaTex会将所有未排版的
    浮动对象排版完后，再继续排版后面的内容。
\end{comment}


% ***** ****** ****** ****** ******
% TODO list
% ***** ****** ****** ****** ******
% for to-do-list, check box
\usepackage{enumitem,amssymb}
\newlist{todolist}{itemize}{2}
\setlist[todolist]{label=$\square$}
% for check symbol 
\usepackage{pifont}
\newcommand{\cmark}{\ding{51}}%
\newcommand{\xmark}{\ding{55}}%
\newcommand{\done}{\rlap{$\square$}{\raisebox{2pt}{\large\hspace{1pt}\cmark}}\hspace{-2.5pt}}
\newcommand{\wontfix}{\rlap{$\square$}{\large\hspace{1pt}\xmark}}
\begin{comment}
    使用方法:
    \begin{todolist}
		\item [\wontfix] 休息休息
		\item [\done] 吃饭
		\item [\done] 学习
		\item 8点开始学习。
		\item 待完成。。。
	\end{todolist}
\end{comment}


% ***** ****** ****** ****** ******
% 字体说明
% ***** ****** ****** ****** ******
\begin{comment}
    \tiny 
    \scriptsize
    \footnotesize
    \small
    \normalsize
    \large
    \Large
    \LARGE
    \huge
    \Huge
\end{comment}


% ***** ****** ****** ****** ******
% 设置字体颜色的方法 
% ***** ****** ****** ****** ******
\begin{comment}
    方法一: 直接使用定义好的颜色, 其中textcolor{...}中包含的是系统定义好的颜色
    \usepackage{color}
    \textcolor{red/blue/green/black/white/cyan/magenta/yellow}{text}
    % 或者
    {\color{orange}橙色}

    方法二: 组合red、green和blue的值合成我们想要的颜色
    \usepackage{color}
    % {r,g,b}代表red、green和blue三种颜色的组合，取值范围为[0-1]
    \textcolor[rgb]{r,g,b}{text}
    % {R,G,B}代表red、green和blue三种颜色的组合，取值范围为[0-255]
    \textcolor[RGB]{R,G,B}{text}
 
    方法三: 定义一种颜色，直接调用
    \usepackage{color}
    \definecolor{ColorName}{rgb}{r,g,b} % 这时r/g/b的定义域就在[0-1]。
    \definecolor{ColorName}{RGB}{R,G,B} % 这时R/G/B的定义域就在[0-255]。
    % 这里为颜色定义了名称ColorName，下面可以直接调用这个颜色方案
    \textcolor{ColorName}{text}

    其它命令:
    1. 设置背景:
    \pagecolor{yellow}          %设置背景色为黄色
    2. 颜色框:
    \colorbox{red}{\color{black}红底黑字}
    \fcolorbox{red}{green}{红框绿背景} %框色+背景色
\end{comment}


% ***** ****** ****** ****** ******
% Font Awesome图标 -- 已经在上面使用了fontawesome5
% ***** ****** ****** ****** ******
\begin{comment}
    FontAwesome是一个latex图标库，提供了600+个图标，常用于简历、非正式报告等模板。
    FontAwesome可通过XELaTeX、LuaLaTeX、PDFLaTeX编译。 
    调用方式如下：
    首先导入fontawesome包
    \usepackage{fontawesome}

    官方主页: https://fontawesome.com/
    Github: https://github.com/xdanaux/fontawesome-latex
\end{comment}


% ***** ****** ****** ****** ******
% 脚注，边注
% ***** ****** ****** ****** ******
\usepackage{marginnote}
\begin{comment}
    1. 脚注: 
    命令: \footnote{脚注内容}

    2. 边注：
    命令:\marginpar{边注内容}
    还可利用marginnote宏包的\marginnote命令，由于不使用浮动体，用得更广

    切换边注的方向，使用\reversemarginpar和\normalmarginpar命令

\end{comment}


% ***** ****** ****** ****** ******
% 删除线，下划线
% ***** ****** ****** ****** ******
\usepackage[normalem]{ulem}
\begin{comment}
  \uline{下划线}    % 下划线
  \uuline{双下划线} % 双下划线
  \uwave{波浪线}    % 波浪线
  \sout{删除线}     % 删除线
  \xout{斜删除线}   % 斜删除线
\end{comment}


% ***** ****** ****** ****** ******
% 内容被删除(划掉)的效果
% ***** ****** ****** ****** ******
\usepackage{cancel}
\begin{comment}
  \cancel{公式内容}  或
  \bcancel{公式内容}  或
  \xcancel{公式内容}  或
  \cancelto{新公式内容}{原公式内容}
\end{comment}

% ***** ****** ****** ****** ******
% 自定义命令
% ***** ****** ****** ****** ******
\begin{comment}
    在写 LaTeX 文档的时候，我们有时候想使用自定义的命令来简化一些复杂的、需要重
    复使用的、带有参数的命令（或者命令的组合）。
    命令: 
    \newcommand{}[]{}
    我们可以看到该命令有三个参数：
    第一个参数定义了命令的名字，例如，\X
    第二个参数定义了新命令的参数的数量，例如，1。（最多支持九个参数）
    第三个参数定义了新命令的具体内容，例如，\textbf{#1}，其中#1代表的是第一个参
    数，以此类推#2……
    示例1:
    \newcommand{\X}[1]{ {\color{red}\textbf{#1} $\checkmark$} }
    Hi, \X{I'm Xovee Xu}, do you like this blog?
    示例2:
    \newcommand{\Name}[2]{ My name is #1 #2. }
    \Name{Xovee}{Xu}
\end{comment}

% 定义\warning命令
\newcounter{warningCount} 
% Warning -- 方框
\newtcolorbox[use counter=warningCount, number format=\arabic]{warning}
  {attach title to upper, after title={:\ }, title={\faInfoCircle\ WARN},
  colframe=white!40!black, coltitle=orange!95!black, fonttitle=\bfseries,
  breakable}

% Warning -- 上下线条
\newtcolorbox[use counter=warningCount, number format=\arabic]{warningLines}
  {attach title to upper, after title={:\ }, title={\faInfoCircle\ WARN},
  toprule=1pt, bottomrule=1pt, leftrule=0pt, rightrule=0pt, arc=0pt,
  colback=white, breakable,
  colframe=white!40!black, coltitle=orange!95!black, fonttitle=\bfseries}

% 定义\note命令
\newcounter{noteCount} 
% Note -- 方框
\newtcolorbox[use counter=noteCount, number format=\arabic]{note}
  {attach title to upper, after title={:\ }, title={\faEdit[regular]\ NOTE},
  colframe=white!40!black, coltitle=green!75!black, fonttitle=\bfseries,
  breakable}

% Note -- 上下线条
\newtcolorbox[use counter=noteCount, number format=\arabic]{noteLines}
  {attach title to upper, after title={:\ }, title={\faEdit[regular]\ NOTE},
  toprule=1pt, bottomrule=1pt, leftrule=0pt, rightrule=0pt, arc=0pt,
  colback=white, breakable,
  colframe=white!40!black, coltitle=green!75!black, fonttitle=\bfseries}


% ***** ****** ****** ****** ******
% Latex特殊符号
% ***** ****** ****** ****** ******
\begin{comment}
  %Latex命令        输出符号
  \#                #
  \%                %
  \}                }
  \_{}              _
  \textbackslash    \
  \$                &
  \{                {
  \~{}              ~
  \^{}              ^
  \&                &
  %引号
  `%(反引号)        '(左单引号)
  '%(单引号)        '(右单引号)
  ``%(两个反引号)   "(左双引号)
  "%(双引号)        "(右双引号)
  \verb|`|          `(反引号)
  -                 连字符
  --                连接号
  ---               破折号
  %数学环境
  $\backslash$      \
  $-$               减号
\end{comment}
